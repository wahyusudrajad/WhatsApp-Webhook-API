<!DOCTYPE html>
<html lang="id">

<head>
    <%- include('partials/head') %>
        <style>
            .chat-container {
                display: flex;
                height: calc(100vh - 120px);
                background: var(--card);
                border-radius: var(--radius);
                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                overflow: hidden;
            }

            .chat-list {
                width: 280px;
                border-right: 1px solid var(--border);
                overflow-y: auto;
                background: var(--background);
            }

            .chat-item {
                padding: .75rem 1rem;
                cursor: pointer;
                border-bottom: 1px solid var(--border);
            }

            .chat-item.active { background: rgba(0,0,0,.08); }

            .chat-panel { flex: 1; display:flex; flex-direction:column; }

            .chat-box {
                flex: 1;
                overflow-y: auto;
                padding: 1rem;
                background: var(--background);
                border-bottom: 1px solid var(--border);
            }

            .message-item {
                margin-bottom: 1rem;
                padding: .75rem 1rem;
                border-radius: var(--radius);
                background: var(--card);
                border: 1px solid var(--border);
                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            }

            .message-item .message-from {
                font-weight: 600;
                margin-bottom: .25rem;
                color: var(--foreground);
            }

            .message-item .message-text {
                color: var(--foreground);
            }

            .chat-send {
                display: flex;
                gap: .5rem;
                padding: 1rem;
                background: var(--card);
                border-top: 1px solid var(--border);
            }

            .chat-send input {
                flex: 1;
                padding: .75rem;
                border: 1px solid var(--border);
                border-radius: var(--radius);
                background: var(--background);
                color: var(--foreground);
                font-size: 14px;
            }

            .chat-send input:focus {
                outline: none;
                border-color: var(--ring);
                box-shadow: 0 0 0 2px rgba(37, 211, 102, 0.1);
            }

            .chat-send button {
                white-space: nowrap;
                padding: .75rem 1.5rem;
            }

            .quoted-reply {
                background: rgba(0,0,0,0.1);
                border-left: 2px solid #25D366;
                padding: 0.5rem;
                margin-bottom: 0.5rem;
                border-radius: 4px;
                font-size: 0.9em;
                opacity: 0.8;
            }
            .quoted-reply .quoted-sender { font-weight: bold; }
            .message-actions { float: right; opacity: 0; transition: opacity 0.2s ease-in-out; }
            .message-item:hover .message-actions { opacity: 1; }
            .message-actions i { cursor: pointer; margin-left: 8px; font-size: 1.1rem; }

            .reply-preview {
                padding: 0.5rem 1rem;
                background: var(--background);
                border-bottom: 1px solid var(--border);
                display: none;
            }
            .reply-preview-content {
                background: rgba(0,0,0,0.1);
                border-left: 2px solid #25D366;
                padding: .5rem;
                border-radius: 4px;
            }
            .reply-preview p { margin: 0; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
            #reply-close-btn { position: absolute; top: .5rem; right: .5rem; background: none; border: none; font-size: 1.2rem; cursor: pointer; }
        </style>
</head>

<body>
    <div class="dashboard-layout">
        <%- include('partials/sidebar', { page: 'chat' }) %>
            <div class="main-content">
                <%- include('partials/navbar', { title: 'Live Chat' }) %>
                    <main class="content-wrapper">
                        <div class="chat-container">
                            <div class="chat-list" id="chatList"></div>
                            <div class="chat-panel">
                                <div id="replyPreview" class="reply-preview">
                                    <div style="position:relative">
                                        <button id="reply-close-btn" onclick="cancelReply()">&times;</button>
                                        <div class="reply-preview-content">
                                            <p>Replying to <strong id="replySender"></strong></p>
                                            <p id="replyText" style="opacity:0.8;"></p>
                                        </div>
                                    </div>
                                    <input type="hidden" id="replyToId" />
                                </div>
                                <div id="messagesBox" class="chat-box"></div>
                                <form id="sendForm" class="chat-send" onsubmit="return sendMessage(event)">
                                    <input type="text" id="toInput" placeholder="Phone number (e.g. 628123...)" required />
                                    <input type="text" id="msgInput" placeholder="Type message..." required />
                                    <button class="btn btn-primary" type="submit">Send</button>
                                </form>
                            </div>
                        </div>
                    </main>
            </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <script>
        const socket = io({ query: { userId: '<%= userId %>' } });
        const messagesBox = document.getElementById('messagesBox');
        const chatListEl = document.getElementById('chatList');
        const replyPreviewEl = document.getElementById('replyPreview');
        const replyToIdEl = document.getElementById('replyToId');
        let currentChat = null;

        async function loadChats(){
            try{
                const res = await fetch('/api/chats');
                if (!res.ok) throw new Error('Failed to fetch chats');
                const chats = await res.json();
                chatListEl.innerHTML = '';
                if(chats.length === 0){
                    chatListEl.innerHTML = '<p style="padding: 1rem; opacity: 0.7;">No chats yet...</p>';
                    return;
                }
                chats.forEach(c=>{
                    const item=document.createElement('div');
                    item.className='chat-item';
                    item.dataset.jid=c.chat_jid;
                    item.innerHTML = `
                        <div style="font-weight: 600;">${c.sender || c.chat_jid.replace('@s.whatsapp.net','')}</div>
                        <div style="opacity: 0.8; font-size: 0.9em; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${c.message}</div>
                    `;
                    item.addEventListener('click',()=>selectChat(c.chat_jid));
                    chatListEl.appendChild(item);
                });
                if(chats.length>0 && !currentChat){ selectChat(chats[0].chat_jid); }
            }catch(err){
                console.error(err);
                chatListEl.innerHTML = '<p style="padding: 1rem; color: red;">Could not load chats.</p>';
            }
        }

        async function selectChat(jid){
            currentChat=jid;
            [...chatListEl.children].forEach(el=>el.classList.toggle('active', el.dataset.jid===jid));
            messagesBox.innerHTML='';
            document.getElementById('toInput').value = jid.replace(/@s\.whatsapp\.net$/, '');
            try{
                const res=await fetch(`/api/chats/${encodeURIComponent(jid)}`);
                const msgs=await res.json();
                msgs.forEach(m=>addMessage(m));
            }catch(err){console.error(err);}
        }

        function addMessage(data) {
            const el = document.createElement('div');
            el.className = 'message-item';
            const ts = data.timestamp ? (data.timestamp < 1e12 ? data.timestamp * 1000 : data.timestamp) : Date.now();
            
            let quotedHtml = '';
            if (data.quoted_text) {
                quotedHtml = `<div class="quoted-reply">
                    <div class="quoted-sender">${(data.quoted_sender || '').split('@')[0]}</div>
                    <div>${data.quoted_text}</div>
                </div>`;
            }

            const actionsHtml = data.id ? `<div class="message-actions">
                <i class="ri-reply-line" onclick="prepareReply(${data.id}, '${data.sender}', '${(data.message || '').replace(/'/g, "\\'").replace(/\n/g, ' ')}')"></i>
            </div>` : '';

            el.innerHTML = `
                ${actionsHtml}
                <div class="message-from">${data.sender || 'Unknown'}</div>
                ${quotedHtml}
                <div class="message-text">${data.message || data.text || ''}</div>
                <div class="message-time" style="font-size:0.75rem;opacity:.7">${new Date(ts).toLocaleTimeString()}</div>
            `;
            messagesBox.appendChild(el);
            messagesBox.scrollTop = messagesBox.scrollHeight;
        }

        function prepareReply(id, sender, text) {
            replyToIdEl.value = id;
            document.getElementById('replySender').textContent = sender;
            document.getElementById('replyText').textContent = text;
            replyPreviewEl.style.display = 'block';
            document.getElementById('msgInput').focus();
        }

        function cancelReply() {
            replyToIdEl.value = '';
            replyPreviewEl.style.display = 'none';
        }

        socket.on('new_message', msg=>{
            if(![...chatListEl.children].some(el=>el.dataset.jid===msg.chat_jid)) loadChats();
            if(currentChat===msg.chat_jid) addMessage(msg);
        });

        document.addEventListener('DOMContentLoaded', loadChats);

        async function sendMessage(ev) {
            ev.preventDefault();
            const to = document.getElementById('toInput').value.trim();
            const msg = document.getElementById('msgInput').value.trim();
            const reply_to_id = replyToIdEl.value || null;
            if (!to || !msg) return;
            try {
                const res = await fetch('/send-message', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ to: to, message: msg, reply_to_id: reply_to_id })
                });
                const json = await res.json();
                if (!res.ok) alert(json.error || 'Failed');
                else {
                    document.getElementById('msgInput').value = '';
                    cancelReply();
                }
            } catch (err) { alert(err.message); }
        }
    </script>
</body>

</html>